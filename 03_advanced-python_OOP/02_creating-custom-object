# ---------------------------------------------------------------------------- #
#                            CREATING CUSTOM OBJECTS                           #
# ---------------------------------------------------------------------------- #
'''
Custom objects are blueprint for instances
	- as a blueprint: the naming convention is 
	to use singular word

Creating a class object
	- declare the object with `class`
	- define the object name starting with a capital
	- define the object name is camelCase

	- first function must me an `__init__(self, name):`
	( 2 underscores are called dunder or magic method )
		- self refers to itself, ( the caller instance )
		parameters after would be attributed

	- Instance are create from the same class object 
	but printing those will create another object into memory
	( which is what we want )

'''


class Player:
    # class object attributes
    '''
     - static attributes are regular variables
     - accessed as follow: <CLASS>.<STATIC-ATTRIBUTE>
     '''
    membership = True

    # "init" or "constructor" method
    def __init__(self, name):
        # dynamic attributes starts with self
        self.name = name

    def run():
        print('run')

    def shout(self):
        nameFormatted = self.name.upper()
        print(f'MY NAME IS { nameFormatted }')

    def get_full_description(self, extra):
        print(f'My name is { self.name } and I can')
        if (extra):
            print(f'I also like {extra}')

'''
All instances will benefits of everything defined
within the class
'''
# instanciating Player as players
player1 = Player("Lowla")
player1.shout()
# player1.shout('ROCK') # TypeError: shout() takes 1 positional argument but 2 were given

player1.get_full_description('learning, coding')
